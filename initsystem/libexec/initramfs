#!/bin/ash

# This file is part of initsystem
#
# Copyright (C) 2014-2021 Val√®re Monseur (archlinux at vale dot re)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

export PATH=/bin:/sbin:/usr/bin:/usr/sbin

################################################################################
# sanity check #################################################################
################################################################################

if [ $$ != 1 ]; then
  echo "initramfs: this script should be pid 1"
  exit 1
fi

################################################################################
# functions ####################################################################
################################################################################

reboot_system() {
  echo "initramfs: rebooting in 15 seconds"

  killall5 -TERM; sleep 5
  killall5 -KILL; sleep 5
  umount -a -r; sleep 5
  reboot -f
}

rescue_shell() {
  echo "initramfs: loading keymap"

  loadkmap < /etc/keymap

  echo "initramfs: dropping to rescue shell"
  echo "initramfs: type 'setsid cttyhack ash' to get a controlling terminal"
  echo "initramfs: type 'exit' to reboot the system"

  sulogin /dev/console
  reboot_system
}

wait_filesystem() {
  for i in $(seq "$2"); do
    if [ -e "$(findfs "$1")" ]; then
      return
    fi

    sleep .25
  done

  echo "initramfs: timeout reached"
  rescue_shell
}

check_fsck() {
  if [ $(( $1 & 2 )) -eq 2 ]; then
    echo "initramfs: system will be rebooted due to fsck error(s) $1"
    reboot_system
  fi

  if [ $(( $1 | 33 )) -ne 33 ]; then
    echo "initramfs: fsck error(s) $1"
    rescue_shell
  fi
}

################################################################################
# in-memory filesystems ########################################################
################################################################################

echo "initramfs: mounting in-memory filesystems"

mount -t proc -o nosuid,nodev,noexec proc /proc
mount -t sysfs -o nosuid,nodev,noexec sys /sys
mount -t devtmpfs -o nosuid,mode=0755 dev /dev
mkdir -p /dev/pts
mount -t devpts -o nosuid,noexec,gid=5,mode=0620,ptmxmode=0 pts /dev/pts

################################################################################
# kernel command line ##########################################################
################################################################################

echo "initramfs: parsing kernel command line"

for COMMAND in $(cat /proc/cmdline); do
  case $COMMAND in
    break=*)
      # optional: break=premount or break=postmount
      BREAK=${COMMAND#break=}
      ;;
    init=*)
      # init=/sbin/init-og
      INIT=${COMMAND#init=}
      ;;
    root=*)
      # root=/dev/xxx or root=UUID=xxx or root=LABEL=xxx
      ROOT=${COMMAND#root=}
      ;;
  esac
done

if [ -z "$BREAK" ]; then
  BREAK="nobreak"
fi

if [ -z "$INIT" ]; then
  echo "initramfs: using default init=/sbin/init"
  INIT=/sbin/init
fi

if [ -z "$ROOT" ]; then
  echo "initramfs: missing root filesystem"
  rescue_shell
fi

################################################################################
# modules ######################################################################
################################################################################

echo "initramfs: loading modules"

while IFS= read -r MODULE; do
  modprobe "$MODULE"
done < /etc/modules

################################################################################
# pre-mount break ##############################################################
################################################################################

if [ "$BREAK" = 'premount' ]; then
  echo "initramfs: break on pre-mount"
  rescue_shell
fi

################################################################################
# filesystems ##################################################################
################################################################################

echo "initramfs: waiting for root filesystem $ROOT"

wait_filesystem "$ROOT" 240

ROOT=$(findfs "$ROOT") # get the filesystem device
eval $(blkid "$ROOT" | awk '{print $NF}') # get the filesystem type

echo "initramfs: checking root filesystem $ROOT ($TYPE)"

touch /etc/fstab
ln -s /proc/self/mounts /etc/mtab

fsck -T -t "$TYPE" "$ROOT"
check_fsck $?

echo "initramfs: mounting root filesystem read-only"

mount -r -t "$TYPE" "$ROOT" /newroot

if [ $? -ne 0 ]; then
  echo "initramfs: cannot mount root filesystem"
  rescue_shell
fi

echo "initramfs: checking other filesystems"

cp -f /newroot/etc/fstab /etc/fstab

fsck -T -A -R
check_fsck $?

################################################################################
# post-mount break #############################################################
################################################################################

if [ "$BREAK" = 'postmount' ]; then
  echo "initramfs: break on post-mount"
  rescue_shell
fi

################################################################################
# init #########################################################################
################################################################################

echo "initramfs: checking init program $INIT"

if [ ! -x /newroot/"$INIT" ]; then
  echo "initramfs: init program doesn't exist or is not executable"
  rescue_shell
fi

################################################################################
# in-memory filesystems ########################################################
################################################################################

echo "initramfs: unmounting in-memory filesystems"

umount /dev/pts
umount /dev
umount /sys
umount /proc

################################################################################
# swiching root ################################################################
################################################################################

echo "initramfs: switching root filesystem"

exec env -i /bin/switch_root /newroot "$INIT"

echo "initramfs: cannot switch root filesystem and execute init program"

rescue_shell

# vim: set filetype=sh:
